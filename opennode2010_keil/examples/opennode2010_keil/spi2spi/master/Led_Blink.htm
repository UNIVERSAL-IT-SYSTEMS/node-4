<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [G:\学习\大三下课件\wireless sensor network\wsn\opennode\opennode\Led_Blink.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image G:\学习\大三下课件\wireless sensor network\wsn\opennode\opennode\Led_Blink.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 524]: Last Updated: Sun May 29 18:24:45 2011
<BR><P>
<H3>Maximum Stack Usage =         40 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BSP_Init &rArr; NVIC_Configuration &rArr; NVIC_Init
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[bc68ec]">__WFI</a>
 <LI><a href="#[bc68b0]">__WFE</a>
 <LI><a href="#[bc6874]">__SEV</a>
 <LI><a href="#[bc6838]">__ISB</a>
 <LI><a href="#[bc67fc]">__DSB</a>
 <LI><a href="#[bc67c0]">__DMB</a>
 <LI><a href="#[bc6784]">__SVC</a>
 <LI><a href="#[bc6748]">__MRS_CONTROL</a>
 <LI><a href="#[bc670c]">__MSR_CONTROL</a>
 <LI><a href="#[bc66d0]">__MRS_PSP</a>
 <LI><a href="#[bc6694]">__MSR_PSP</a>
 <LI><a href="#[bc6658]">__MRS_MSP</a>
 <LI><a href="#[bc661c]">__MSR_MSP</a>
 <LI><a href="#[bc65e0]">__RESETPRIMASK</a>
 <LI><a href="#[bc65a4]">__SETPRIMASK</a>
 <LI><a href="#[bc6568]">__READ_PRIMASK</a>
 <LI><a href="#[bc652c]">__SETFAULTMASK</a>
 <LI><a href="#[bc64f0]">__RESETFAULTMASK</a>
 <LI><a href="#[bc64b4]">__READ_FAULTMASK</a>
 <LI><a href="#[bc6478]">__BASEPRICONFIG</a>
 <LI><a href="#[bc643c]">__GetBASEPRI</a>
 <LI><a href="#[bc6400]">__REV_HalfWord</a>
 <LI><a href="#[bc63c4]">__REV_Word</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[bc61a8]">Reset_Handler</a>
 <LI><a href="#[bc58fc]">NMIException</a>
 <LI><a href="#[bc5a64]">HardFaultException</a>
 <LI><a href="#[bc5938]">MemManageException</a>
 <LI><a href="#[bc6004]">BusFaultException</a>
 <LI><a href="#[bc50c8]">UsageFaultException</a>
 <LI><a href="#[bc56a4]">SVCHandler</a>
 <LI><a href="#[bc5cbc]">DebugMonitor</a>
 <LI><a href="#[bc5884]">PendSVC</a>
 <LI><a href="#[bc5668]">SysTickHandler</a>
 <LI><a href="#[bc508c]">WWDG_IRQHandler</a>
 <LI><a href="#[bc58c0]">PVD_IRQHandler</a>
 <LI><a href="#[bc562c]">TAMPER_IRQHandler</a>
 <LI><a href="#[bc57d0]">RTC_IRQHandler</a>
 <LI><a href="#[bc5adc]">FLASH_IRQHandler</a>
 <LI><a href="#[bc5848]">RCC_IRQHandler</a>
 <LI><a href="#[bc5c80]">EXTI0_IRQHandler</a>
 <LI><a href="#[bc5c08]">EXTI1_IRQHandler</a>
 <LI><a href="#[bc5bcc]">EXTI2_IRQHandler</a>
 <LI><a href="#[bc5b90]">EXTI3_IRQHandler</a>
 <LI><a href="#[bc5b54]">EXTI4_IRQHandler</a>
 <LI><a href="#[bc5f50]">DMA1_Channel1_IRQHandler</a>
 <LI><a href="#[bc5f14]">DMA1_Channel2_IRQHandler</a>
 <LI><a href="#[bc5ed8]">DMA1_Channel3_IRQHandler</a>
 <LI><a href="#[bc5e9c]">DMA1_Channel4_IRQHandler</a>
 <LI><a href="#[bc5e60]">DMA1_Channel5_IRQHandler</a>
 <LI><a href="#[bc5e24]">DMA1_Channel6_IRQHandler</a>
 <LI><a href="#[bc5de8]">DMA1_Channel7_IRQHandler</a>
 <LI><a href="#[bc607c]">ADC1_2_IRQHandler</a>
 <LI><a href="#[bc5140]">USB_HP_CAN_TX_IRQHandler</a>
 <LI><a href="#[bc5104]">USB_LP_CAN_RX0_IRQHandler</a>
 <LI><a href="#[bc5fc8]">CAN_RX1_IRQHandler</a>
 <LI><a href="#[bc5f8c]">CAN_SCE_IRQHandler</a>
 <LI><a href="#[bc5b18]">EXTI9_5_IRQHandler</a>
 <LI><a href="#[bc55f0]">TIM1_BRK_IRQHandler</a>
 <LI><a href="#[bc553c]">TIM1_UP_IRQHandler</a>
 <LI><a href="#[bc5578]">TIM1_TRG_COM_IRQHandler</a>
 <LI><a href="#[bc55b4]">TIM1_CC_IRQHandler</a>
 <LI><a href="#[bc5500]">TIM2_IRQHandler</a>
 <LI><a href="#[bc54c4]">TIM3_IRQHandler</a>
 <LI><a href="#[bc5488]">TIM4_IRQHandler</a>
 <LI><a href="#[bc59ec]">I2C1_EV_IRQHandler</a>
 <LI><a href="#[bc5a28]">I2C1_ER_IRQHandler</a>
 <LI><a href="#[bc5974]">I2C2_EV_IRQHandler</a>
 <LI><a href="#[bc59b0]">I2C2_ER_IRQHandler</a>
 <LI><a href="#[bc5758]">SPI1_IRQHandler</a>
 <LI><a href="#[bc571c]">SPI2_IRQHandler</a>
 <LI><a href="#[bc5230]">USART1_IRQHandler</a>
 <LI><a href="#[bc51f4]">USART2_IRQHandler</a>
 <LI><a href="#[bc51b8]">USART3_IRQHandler</a>
 <LI><a href="#[bc5c44]">EXTI15_10_IRQHandler</a>
 <LI><a href="#[bc580c]">RTCAlarm_IRQHandler</a>
 <LI><a href="#[bc517c]">USBWakeUp_IRQHandler</a>
 <LI><a href="#[bc5398]">TIM8_BRK_IRQHandler</a>
 <LI><a href="#[bc52e4]">TIM8_UP_IRQHandler</a>
 <LI><a href="#[bc5320]">TIM8_TRG_COM_IRQHandler</a>
 <LI><a href="#[bc535c]">TIM8_CC_IRQHandler</a>
 <LI><a href="#[bc6040]">ADC3_IRQHandler</a>
 <LI><a href="#[bc5aa0]">FSMC_IRQHandler</a>
 <LI><a href="#[bc5794]">SDIO_IRQHandler</a>
 <LI><a href="#[bc544c]">TIM5_IRQHandler</a>
 <LI><a href="#[bc56e0]">SPI3_IRQHandler</a>
 <LI><a href="#[bc52a8]">UART4_IRQHandler</a>
 <LI><a href="#[bc526c]">UART5_IRQHandler</a>
 <LI><a href="#[bc5410]">TIM6_IRQHandler</a>
 <LI><a href="#[bc53d4]">TIM7_IRQHandler</a>
 <LI><a href="#[bc5dac]">DMA2_Channel1_IRQHandler</a>
 <LI><a href="#[bc5d70]">DMA2_Channel2_IRQHandler</a>
 <LI><a href="#[bc5d34]">DMA2_Channel3_IRQHandler</a>
 <LI><a href="#[bc5cf8]">DMA2_Channel4_5_IRQHandler</a>
 <LI><a href="#[bbc338]">main</a>
 <LI><a href="#[14a2b18]">__main</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[14a2b18]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(.text)
</UL>
<P><STRONG><a name="[14a27d0]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[14a26a4]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[14a244c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14a2668]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[14a244c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[14a2578]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[bc68ec]"></a>__WFI</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbc608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTANDBYMode
<LI><a href="#[bbc644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[bc68b0]"></a>__WFE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbc644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTOPMode
</UL>

<P><STRONG><a name="[bc6874]"></a>__SEV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc6838]"></a>__ISB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc67fc]"></a>__DSB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc67c0]"></a>__DMB</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc6784]"></a>__SVC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc6748]"></a>__MRS_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc670c]"></a>__MSR_CONTROL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc66d0]"></a>__MRS_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc6694]"></a>__MSR_PSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc6658]"></a>__MRS_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc661c]"></a>__MSR_MSP</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc65e0]"></a>__RESETPRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc13d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_RESETPRIMASK
</UL>

<P><STRONG><a name="[bc65a4]"></a>__SETPRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc1414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SETPRIMASK
</UL>

<P><STRONG><a name="[bc6568]"></a>__READ_PRIMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc652c]"></a>__SETFAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc139c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SETFAULTMASK
</UL>

<P><STRONG><a name="[bc64f0]"></a>__RESETFAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc1360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_RESETFAULTMASK
</UL>

<P><STRONG><a name="[bc64b4]"></a>__READ_FAULTMASK</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc6478]"></a>__BASEPRICONFIG</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc1324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_BASEPRICONFIG
</UL>

<P><STRONG><a name="[bc643c]"></a>__GetBASEPRI</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc12e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetBASEPRI
</UL>

<P><STRONG><a name="[bc6400]"></a>__REV_HalfWord</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc63c4]"></a>__REV_Word</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cortexm3_macro.o(.text), UNUSED)

<P><STRONG><a name="[bc61a8]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_vector.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc58fc]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc1798]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc5a64]"></a>HardFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc175c]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc5938]"></a>MemManageException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc1720]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc6004]"></a>BusFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc16e4]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc50c8]"></a>UsageFaultException</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc16a8]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc166c]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc5cbc]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc56a4]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc1630]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc5884]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc15f4]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc5668]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc15b8]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc508c]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc58c0]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc562c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc57d0]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5adc]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5848]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5c80]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5c08]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5bcc]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5b90]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc157c]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc5b18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[bc5b54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[bc5b54]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bc157c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5f50]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5f14]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5ed8]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5e9c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5e60]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5e24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5de8]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc607c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5140]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5104]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5fc8]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5f8c]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5b18]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[bc157c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc55f0]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc553c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5578]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc55b4]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5500]"></a>TIM2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc54c4]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5488]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc59ec]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5a28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5974]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc59b0]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5758]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc571c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5230]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc51f4]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc51b8]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5c44]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc580c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc517c]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5398]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc52e4]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5320]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc535c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc6040]"></a>ADC3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5aa0]"></a>FSMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5794]"></a>SDIO_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc544c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc56e0]"></a>SPI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc52a8]"></a>UART4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc526c]"></a>UART5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5410]"></a>TIM6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc53d4]"></a>TIM7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5dac]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5d70]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5d34]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc5cf8]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x_vector.o(RESET)
</UL>
<P><STRONG><a name="[bc1540]"></a>NVIC_DeInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1504]"></a>NVIC_SCBDeInit</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc14c8]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bc148c]"></a>NVIC_Init</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bc1450]"></a>NVIC_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1414]"></a>NVIC_SETPRIMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc65a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SETPRIMASK
</UL>

<P><STRONG><a name="[bc13d8]"></a>NVIC_RESETPRIMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc65e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESETPRIMASK
</UL>

<P><STRONG><a name="[bc139c]"></a>NVIC_SETFAULTMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc652c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__SETFAULTMASK
</UL>

<P><STRONG><a name="[bc1360]"></a>NVIC_RESETFAULTMASK</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc64f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__RESETFAULTMASK
</UL>

<P><STRONG><a name="[bc1324]"></a>NVIC_BASEPRICONFIG</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc6478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__BASEPRICONFIG
</UL>

<P><STRONG><a name="[bc12e8]"></a>NVIC_GetBASEPRI</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc643c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GetBASEPRI
</UL>

<P><STRONG><a name="[bc12ac]"></a>NVIC_GetCurrentPendingIRQChannel</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1270]"></a>NVIC_GetIRQChannelPendingBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1234]"></a>NVIC_SetIRQChannelPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc11f8]"></a>NVIC_ClearIRQChannelPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc11bc]"></a>NVIC_GetCurrentActiveHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1180]"></a>NVIC_GetIRQChannelActiveBitStatus</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1144]"></a>NVIC_GetCPUID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1108]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bc10cc]"></a>NVIC_GenerateSystemReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1090]"></a>NVIC_GenerateCoreReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1054]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc1018]"></a>NVIC_SystemHandlerConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0fdc]"></a>NVIC_SystemHandlerPriorityConfig</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0fa0]"></a>NVIC_GetSystemHandlerPendingBitStatus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0f64]"></a>NVIC_SetSystemHandlerPendingBit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0f28]"></a>NVIC_ClearSystemHandlerPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0eec]"></a>NVIC_GetSystemHandlerActiveBitStatus</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0eb0]"></a>NVIC_GetFaultHandlerSources</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0e74]"></a>NVIC_GetFaultAddress</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0e38]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[bbdea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[bbe4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[bbfd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[bc0dc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[bc0dfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[bc0dfc]"></a>GPIO_DeInit</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bc0dc0]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bc0d84]"></a>GPIO_Init</STRONG> (Thumb, 266 bytes, Stack size 20 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[bbc518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[bc0d48]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0d0c]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0cd0]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0c94]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0c58]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0c1c]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc0be0]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc0ba4]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0b68]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0b2c]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0af0]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0ab4]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0a78]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0a3c]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bc0a00]"></a>FLASH_SetLatency</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc09c4]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0988]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc094c]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0910]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc08d4]"></a>FLASH_GetStatus</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc0898]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc08d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
<LI><a href="#[bc4ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bc067c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[bc06b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[bc06f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[bc0730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[bc076c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[bc07a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[bc07e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[bc0820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
<LI><a href="#[bc085c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[bc085c]"></a>FLASH_ErasePage</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc0820]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc07e4]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc07a8]"></a>FLASH_ProgramWord</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc076c]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc0730]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc06f4]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc06b8]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc067c]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc0640]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0604]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc05c8]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc058c]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0550]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0514]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc04d8]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc049c]"></a>RCC_DeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc0460]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc0424]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[bc03e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[bc03e8]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc03ac]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0370]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0334]"></a>RCC_PLLConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc02f8]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc02bc]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc0280]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc0244]"></a>RCC_HCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc0208]"></a>RCC_PCLK1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc01cc]"></a>RCC_PCLK2Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bc0190]"></a>RCC_ITConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0154]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0118]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc00dc]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc00a0]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0064]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bc0028]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbffec]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 194 bytes, Stack size 12 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbe4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[14a2fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[bbffb0]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbff74]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bbff38]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[bbfefc]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[bbc770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
<LI><a href="#[bbdea4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[bbe4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[bbe6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_DeInit
<LI><a href="#[bbf4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[bbfec0]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbca40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[bbfe84]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfe48]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfe0c]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfdd0]"></a>RCC_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfd94]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfd58]"></a>ADC_DeInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc0e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bbfd1c]"></a>ADC_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfce0]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfca4]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfc68]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfc2c]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfbf0]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfbb4]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfb78]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfb3c]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfb00]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfac4]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfa88]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfa4c]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbfa10]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf9d4]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf998]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf95c]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf920]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf8e4]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf8a8]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf86c]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf830]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf7f4]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf7b8]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf77c]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf740]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf704]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf6c8]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf68c]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf650]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf614]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf5d8]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf59c]"></a>ADC_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf560]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf524]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf4e8]"></a>CAN_DeInit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[bbf4ac]"></a>CAN_Init</STRONG> (Thumb, 322 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf470]"></a>CAN_FilterInit</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf434]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf3f8]"></a>CAN_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf3bc]"></a>CAN_Transmit</STRONG> (Thumb, 338 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf380]"></a>CAN_TransmitStatus</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf344]"></a>CAN_CancelTransmit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf308]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbf290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
</UL>

<P><STRONG><a name="[bbf2cc]"></a>CAN_MessagePending</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf290]"></a>CAN_Receive</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbf308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FIFORelease
</UL>

<P><STRONG><a name="[bbf254]"></a>CAN_Sleep</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf218]"></a>CAN_WakeUp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf1dc]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf1a0]"></a>CAN_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf164]"></a>CAN_GetITStatus</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc4b64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>

<P><STRONG><a name="[bbf128]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf0ec]"></a>DMA_DeInit</STRONG> (Thumb, 326 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf0b0]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf074]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbf038]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbeffc]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbefc0]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbef84]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbef48]"></a>DMA_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbef0c]"></a>DMA_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbeed0]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbee94]"></a>EXTI_DeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbee58]"></a>EXTI_Init</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[bbee1c]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbede0]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbeda4]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbed68]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbed2c]"></a>EXTI_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbecf0]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbecb4]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbec78]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbec3c]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbec00]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbebc4]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbeb88]"></a>RTC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbeb4c]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbea20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[bbea5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[bbea98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[bbeb10]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbea20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[bbea5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[bbea98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[bbead4]"></a>RTC_GetCounter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbea98]"></a>RTC_SetCounter</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbeb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[bbeb4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[bbea5c]"></a>RTC_SetPrescaler</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbeb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[bbeb4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[bbea20]"></a>RTC_SetAlarm</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbeb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[bbeb4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>

<P><STRONG><a name="[bbe9e4]"></a>RTC_GetDivider</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe9a8]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe96c]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe930]"></a>RTC_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe8f4]"></a>RTC_ClearFlag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe8b8]"></a>RTC_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe87c]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe840]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe804]"></a>SysTick_SetReload</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe7c8]"></a>SysTick_CounterCmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe78c]"></a>SysTick_ITConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe750]"></a>SysTick_GetCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe714]"></a>SysTick_GetFlagStatus</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe6d8]"></a>WWDG_DeInit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[bbe69c]"></a>WWDG_SetPrescaler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe660]"></a>WWDG_SetWindowValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe624]"></a>WWDG_EnableIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe5e8]"></a>WWDG_SetCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe5ac]"></a>WWDG_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe570]"></a>WWDG_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe534]"></a>WWDG_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe4f8]"></a>USART_DeInit</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[bc0e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bbe4bc]"></a>USART_Init</STRONG> (Thumb, 184 bytes, Stack size 52 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[bbe480]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe444]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe408]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe3cc]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe390]"></a>USART_ITConfig</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe354]"></a>USART_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe318]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe2dc]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe2a0]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe264]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe228]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe1ec]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbc4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[bbe1b0]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe174]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe138]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe0fc]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe0c0]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe084]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe048]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbe00c]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdfd0]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdf94]"></a>USART_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbc4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[bbdf58]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdf1c]"></a>USART_GetITStatus</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdee0]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdea4]"></a>TIM_DeInit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[bc0e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[bbde68]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbde2c]"></a>TIM_OC1Init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbddf0]"></a>TIM_OC2Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbddb4]"></a>TIM_OC3Init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdd78]"></a>TIM_OC4Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdd3c]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bbdd00]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bbdcc4]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbdc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bbdc88]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbdc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bbdc4c]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbdc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[bbdcc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[bbdd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[bbdd3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[bc4a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[bc4ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[bc4aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[bc4b28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[bbdc10]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbdc88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[bbdcc4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[bc4a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[bc4ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[bbdbd4]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdb98]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdb5c]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdb20]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdae4]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbdaa8]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbda6c]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbda30]"></a>TIM_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd9f4]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd9b8]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd97c]"></a>TIM_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd940]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd904]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbd88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[bbd8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[bbd8c8]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbd904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[bbd88c]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbd904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[bc4a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[bc4ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[bbd850]"></a>TIM_ETRConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbd7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[bbd814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[bbd814]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbd850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[bbd7d8]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbd850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[bbd79c]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd760]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd724]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd6e8]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd6ac]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd670]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd634]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd5f8]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd5bc]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd580]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd544]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd508]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd4cc]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd490]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd454]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd418]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd3dc]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd3a0]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd364]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd328]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd2ec]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd2b0]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd274]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd238]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd1fc]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd1c0]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd184]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd148]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd10c]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd0d0]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd094]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd058]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbd01c]"></a>TIM_SelectOCxM</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcfe0]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcfa4]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcf68]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcf2c]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcef0]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbceb4]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbce78]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbce3c]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbce00]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcdc4]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcd88]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcd4c]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcd10]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbccd4]"></a>TIM_SetClockDivision</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcc98]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcc5c]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcc20]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcbe4]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcba8]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcb6c]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcb30]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcaf4]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbcab8]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbca7c]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbca40]"></a>BKP_DeInit</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfec0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>

<P><STRONG><a name="[bbca04]"></a>BKP_TamperPinLevelConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc9c8]"></a>BKP_TamperPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc98c]"></a>BKP_ITConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc950]"></a>BKP_RTCOutputConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc914]"></a>BKP_SetRTCCalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc8d8]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc89c]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc860]"></a>BKP_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc824]"></a>BKP_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc7e8]"></a>BKP_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc7ac]"></a>BKP_ClearITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc770]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbfefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[bbc734]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc6f8]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc6bc]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc680]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc644]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc68b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WFE
<LI><a href="#[bc68ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WFI
</UL>

<P><STRONG><a name="[bbc608]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc68ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__WFI
</UL>

<P><STRONG><a name="[bbc5cc]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc590]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc554]"></a>RCC_Configuration</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp &rArr; RCC_GetFlagStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[bbff38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bbff74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc01cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[bc0208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[bc0244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[bc0280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[bc02bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[bc02f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[bc0334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[bc03e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[bc0424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[bc0460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[bc049c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[bc0988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
<LI><a href="#[bc0a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[bbc518]"></a>GPIO_Configuration</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bc0d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[bbc4dc]"></a>NVIC_Configuration</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bbee58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[bc0a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[bc1108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[bc148c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[bc14c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[bbc4a0]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbdf94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[bbe1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[bbc464]"></a>BSP_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_Init &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bbc4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[bbc518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[bbc554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bbc428]"></a>delay_nus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, led_blink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
</UL>

<P><STRONG><a name="[bbc3ec]"></a>delay_nms</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_nms
</UL>
<BR>[Calls]<UL><LI><a href="#[bbc428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nus
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bbc3b0]"></a>Buffercmp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, led_blink.o(.text), UNUSED)

<P><STRONG><a name="[bbc374]"></a>spi_config</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = spi_config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bbc1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[bbc284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[bbc2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[bbc2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[bbff38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bbff74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc0d84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bbc338]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, led_blink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = main &rArr; BSP_Init &rArr; NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[bbc194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitCRC
<LI><a href="#[bbc20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[bbc248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
<LI><a href="#[bbc3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_nms
<LI><a href="#[bbc464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[bc0be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[bc0c1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[bbc284]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[bbfefc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[bc0e38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[bbc1d0]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[14a2fc8]"></a>I2S_Init</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bbffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[14a2f8c]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2f50]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[bbc2c0]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[14a2f14]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2ed8]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2e9c]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[bbc20c]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a2e60]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2e24]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2de8]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2dac]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[bbc194]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bbc2fc]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_config
</UL>

<P><STRONG><a name="[14a2d70]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2d34]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2cf8]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[bbc248]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bbc338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14a2cbc]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2c80]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a2c44]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14a244c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14a2668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[14a26a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[14a2410]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[14a208c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[14a2050]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14a2014]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[bc4ba0]"></a>delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bc0898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[bc4b64]"></a>CheckITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbf164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[bc4b28]"></a>TI4_Config</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bc4aec]"></a>TI3_Config</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bc4ab0]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbd88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[bbdc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[bc4a74]"></a>TI1_Config</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, led_blink.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bbd88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[bbdc10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[bbdc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

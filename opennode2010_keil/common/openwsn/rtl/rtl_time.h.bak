/*******************************************************************************
 * This file is part of OpenWSN, the Open Wireless Sensor Network Platform.
 *
 * Copyright (C) 2005-2010 zhangwei(TongJi University)
 *
 * OpenWSN is a free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 or (at your option) any later version.
 *
 * OpenWSN is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA 02111-1307 USA.
 *
 * For non-opensource or commercial applications, please choose commercial license.
 * Refer to OpenWSN site http://code.google.com/p/openwsn/ for more detail.
 *
 * For other questions, you can contact the author through email openwsn#gmail.com
 * or the mailing address: Dr. Wei Zhang, Dept. of Control, Dianxin Hall, TongJi
 * University, 4800 Caoan Road, Shanghai, China. Zip: 201804
 *
 ******************************************************************************/

#include "rtl_configall.h"
#include "rtl_foundation.h"

// todo
// the following four lines will be eliminated
#define   TiTime8      uint8 
#define   TiTime16     uint16    
#define   TiTime32     uint32 
#define   TiTime64     uint64

typedef uint64 TiSystemTime;
/*
void tm8_reset( uint8 * var, uint8 value );
inline void tm8_clear( TiTime8 * var );
*/


inline bool systime_byte_plus(int8 op1, int8 op2)
{
	//if (op1 + op2)
	return false;
}
/*
inline TiTime8 * tm8_plus( TiTime8 * var1, TiTime8 * var2 );
*/

/**
 * Plus two time value.
 * @return true if success and false is overflow.
 */
inline bool systime_plus( TiSystemTime * op1, TiSystemTime * op2 )
{
	
}
/*
inline TiTime8 * tm8_minus( TiTime8 * var1, TiTime8 * var2 );
 
inline bool tm8_forward( TiTime8 * var, uint8 interval );


*/
/**
 * Minus two time value.
 * @return true if success and false is overflow.
 */
inline bool systime_minus( TiSystemTime * op1, TiSystemTime * op2 )
{
}
/*
inline bool tm8_backward( TiTime8 * var, uint8 interval );


*/
#define systime_forward(tm,step) systime_plus(tm,step)
#define systime_backward(tm,step) systime_minus(tm,step)
/*
inline void tm64_reset( TiTime64 * var, uint64 value );


inline void tm64_clear( TiTime64 * var );

*/

COMPOENT_ATTACH( COMP_A, COMP_B );

USE_COMPONENT( TiUartAdapter, uart_ );
USE_COMPONENT( T, prefix );

#define mac_send(T) prefix##_send
#define mac_recv prefix##_recv

/* interface requirement */
#define TiPhyAdapter 
TiPhyAdapter * phy_send
#define MAKE_USE_OF(type,prefix) \\
	type * ##prefix##_send   \
	prefix_recv
	
/* implementation  */

/* how to use it */
include "interface.h"

IMPL_INTERFACE_BY_COMPONENT

IMPL_PHYADAPTER_BY_COMPONENT(interface, implementation, identifer)
IMPL_PHYADAPTER_BY_COMPONENT(TiPhyAdapter, TiCc2420Adapter, cc2420)
IMPL_PHYADAPTER_BY_COMPONENT(TiPhyAdapter, TiCc2520Adapter, cc2520)
IMPL_PHYADAPTER_BY_COMPONENT;

nio_phy_send
nio_mac_send
nio_mac_recv
nio_net_send
nio_llc_send
nio_ses_send
nio_app_send



xxx_use

compa_xxx
compa_xxxx






/*********************** the following are undetermined ***********************/
=======
inline TiTime64 * tm64_plus( TiTime64 * var1, TiTime64 * var2 );
>>>>>>> .r1266


inline TiTime64 * tm64_minus( TiTime64 * var1, TiTime64 * var2 ); 


inline bool tm64_forward( TiTime64 * var, uint64 interval );


inline bool tm64_backward( TiTime64 * var, uint64 interval );

*/


/*
typedef uint8[8] TiSystemTime;






typedef uint8  TiTime8;  //TiSystemTime8  epoch tick  tm8  rtl_systime  rtl_caltime  rtl  sysclock
typedef uint16 TiTime16;  //TiSystemTime32 
typedef uint32 TiTime32;
typedef uint64 TiTime64;

#define TiSystemTime TiTime64


void tm8_reset( uint8 * var, uint8 value ) {*var=value;}
inline void tm8_clear( TiTime8 * var ) {*var=0;}

inline TiTime8 * tm8_plus( TiTime8 * var1, TiTime8 * var2 )
{
	(*var1) += (*var2);
	return var1;
}

inline TiTime8 * tm8_minus( TiTime8 * var1, TiTime8 * var2 ) 
{
	(*var1) -= (*var2);
	return var1;
}

inline bool tm8_forward( TiTime8 * var, uint8 interval )
{
	// return false to indicate overflow during forward
	if (*var + interval < *var)
		return false;
	else
		return true;
}

inline bool tm8_backward( TiTime8 * var, uint8 interval )
{
	// return false to indicate overflow during forward
	if (*var - interval > *var)
		return false;
	else
		return true;
}



inline void tm64_reset( TiTime64 * var, uint64 value ) {*var=value;}
inline void tm64_clear( TiTime64 * var ) {*var=0;}

inline TiTime64 * tm64_plus( TiTime64 * var1, TiTime64 * var2 )
{
	(*var1) += (*var2);
	return var1;
}

inline TiTime64 * tm64_minus( TiTime64 * var1, TiTime64 * var2 ) 
{
	(*var1) -= (*var2);
	return var1;
}

inline bool tm64_forward( TiTime64 * var, uint64 interval )
{
	// return false to indicate overflow during forward
	if (*var + interval < *var)
		return false;
	else
		return true;
}

inline bool tm64_backward( TiTime64 * var, uint64 interval )
{
	// return false to indicate overflow during forward
	if (*var - interval > *var)
		return false;
	else
		return true;
}

*/
